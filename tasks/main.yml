---

- name: Loading platform variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags: always

- name: Install MariaDB
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  with_items: "{{ mariadb_packages }}"

- name: Create systemd configuration directory
  ansible.builtin.file:
    path: /etc/systemd/system/mariadb.service.d/
    state: directory
    mode: "0755"

- name: Limit number of open files
  notify: Restart MariaDB
  ansible.builtin.copy:
    content: |
      [Service]
      LimitNOFILE=10000
    dest: /etc/systemd/system/mariadb.service.d/limits.conf
    mode: "0644"
  register: reload_systemd_daemon

- name: Reload systemd daemon  # noqa no-handler
  when: reload_systemd_daemon is changed
  ansible.builtin.systemd:
    daemon_reload: true

- name: Configure mariadb
  notify: Restart MariaDB
  ansible.builtin.ini_file:
    dest: "{{ mariadb_configuration_file }}"
    section: mysqld
    option: "{{ item.key }}"
    value: "{{ item.value }}"
    owner: root
    group: root
    mode: "0644"
    state: present
  loop:
    - key: max_connections
      value: "{{ opencast_mariadb_max_connections }}"
    - key: innodb_buffer_pool_size
      value: "{{ opencast_mariadb_innodb_buffer_pool_size }}"
    - key: character_set_server
      value: utf8mb4
    - key: bind-address
      value: "*"

- name: Start MariaDB
  ansible.builtin.systemd:
    name: mariadb
    state: started
    enabled: true

- name: Create Opencast database user
  community.mysql.mysql_user:
    name: "{{ database_user_name }}"
    password: "{{ database_password }}"
    host: "%"
    priv: "{{ database_name }}.*:ALL,GRANT"
    login_user: "{{ database_root_user }}"
    login_password: "{{ database_root_password }}"
    check_implicit_admin: true
    login_unix_socket: /run/mysqld/mysqld.sock

- name: Create Opencast database
  community.mysql.mysql_db:
    name: "{{ database_name }}"
    encoding: utf8mb4
    state: present
    login_user: "{{ database_root_user }}"
    login_password: "{{ database_root_password }}"
    check_implicit_admin: true
    login_unix_socket: /run/mysqld/mysqld.sock

## some configuration steps to mimic what 'mysql_secure_installation' does:

- name: Delete anonymous user
  community.mysql.mysql_user:
    user: ""
    host_all: yes
    state: absent
    login_user: "{{ database_root_user }}"
    login_password: "{{ database_root_password }}"
    check_implicit_admin: true
    login_unix_socket: /run/mysqld/mysqld.sock

- name: Ensure root user can only connect from the local machine
  community.mysql.mysql_query:
    query:
      - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
    login_user: "{{ database_root_user }}"
    login_password: "{{ database_root_password }}"
    login_unix_socket: /run/mysqld/mysqld.sock

- name: ensure unix socket as login method for root user
  community.mysql.mysql_user:
    name: "{{ database_root_user }}"
    plugin: unix_socket
    login_user: "{{ database_root_user }}"
    login_password: "{{ database_root_password }}"
    check_implicit_admin: true
    login_unix_socket: /run/mysqld/mysqld.sock
